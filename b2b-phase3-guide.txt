# B2B+ Phase 3: Advanced Features Implementation

**Duration**: 3-4 weeks  
**Goal**: Bulk ordering, role-based pricing, AI-enhanced Excel imports, offline capability

## Phase 3 Overview

By the end of Phase 3, you will have:
- ✅ CSV bulk order upload
- ✅ Excel file parsing with validation
- ✅ AI-enhanced column mapping (OpenAI GPT-4o-mini)
- ✅ Role-based pricing (customer-specific, volume, tier)
- ✅ Offline capability with WatermelonDB (mobile)
- ✅ OpenAI semantic search for products
- ✅ Smart product recommendations

---

## Step 3.1: Create Pricing Tables and Functions

**Location**: `/supabase/migrations/20240103000000_pricing_system.sql`

**Prompt for Augment**:
```
Create pricing system migration:

-- Pricing tiers (general discounts by tier)
CREATE TABLE pricing_tiers (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  discount_percentage DECIMAL(5,2) NOT NULL,
  min_order_value DECIMAL(10,2),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_pricing_tiers_org ON pricing_tiers(organization_id);

-- Volume pricing (quantity-based discounts)
CREATE TABLE volume_pricing (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  min_quantity INTEGER NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_volume_pricing_product ON volume_pricing(product_id);

-- Customer-specific pricing (highest priority)
CREATE TABLE customer_product_prices (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  price DECIMAL(10,2) NOT NULL,
  effective_date DATE NOT NULL DEFAULT CURRENT_DATE,
  expiration_date DATE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(organization_id, product_id, effective_date)
);

CREATE INDEX idx_customer_prices_org ON customer_product_prices(organization_id);
CREATE INDEX idx_customer_prices_product ON customer_product_prices(product_id);

-- Contracts (negotiated rates)
CREATE TABLE contracts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  contract_number TEXT UNIQUE NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  discount_percentage DECIMAL(5,2),
  notes TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_contracts_org ON contracts(organization_id);

CREATE TABLE contract_prices (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  contract_id UUID NOT NULL REFERENCES contracts(id) ON DELETE CASCADE,
  product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  price DECIMAL(10,2) NOT NULL,
  UNIQUE(contract_id, product_id)
);

CREATE INDEX idx_contract_prices_contract ON contract_prices(contract_id);

-- Function to get resolved price for customer
CREATE OR REPLACE FUNCTION get_customer_price(
  p_organization_id UUID,
  p_product_id UUID,
  p_quantity INTEGER DEFAULT 1
) RETURNS DECIMAL(10,2) AS $$
DECLARE
  final_price DECIMAL(10,2);
  base_price DECIMAL(10,2);
BEGIN
  -- Get base price
  SELECT base_price INTO base_price
  FROM products
  WHERE id = p_product_id;

  -- Priority 1: Customer-specific pricing
  SELECT price INTO final_price
  FROM customer_product_prices
  WHERE organization_id = p_organization_id
    AND product_id = p_product_id
    AND effective_date <= CURRENT_DATE
    AND (expiration_date IS NULL OR expiration_date >= CURRENT_DATE)
  ORDER BY effective_date DESC
  LIMIT 1;

  IF final_price IS NOT NULL THEN
    RETURN final_price;
  END IF;

  -- Priority 2: Contract pricing
  SELECT cp.price INTO final_price
  FROM contract_prices cp
  JOIN contracts c ON cp.contract_id = c.id
  WHERE c.organization_id = p_organization_id
    AND cp.product_id = p_product_id
    AND c.start_date <= CURRENT_DATE
    AND c.end_date >= CURRENT_DATE
  LIMIT 1;

  IF final_price IS NOT NULL THEN
    RETURN final_price;
  END IF;

  -- Priority 3: Volume pricing
  SELECT price INTO final_price
  FROM volume_pricing
  WHERE product_id = p_product_id
    AND min_quantity <= p_quantity
  ORDER BY min_quantity DESC
  LIMIT 1;

  IF final_price IS NOT NULL THEN
    RETURN final_price;
  END IF;

  -- Priority 4: Tier pricing (apply discount to base)
  SELECT base_price * (1 - discount_percentage / 100) INTO final_price
  FROM pricing_tiers
  WHERE organization_id = p_organization_id
  ORDER BY discount_percentage DESC
  LIMIT 1;

  IF final_price IS NOT NULL THEN
    RETURN final_price;
  END IF;

  -- Default: base price
  RETURN base_price;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- RLS policies for pricing tables
ALTER TABLE pricing_tiers ENABLE ROW LEVEL SECURITY;
ALTER TABLE volume_pricing ENABLE ROW LEVEL SECURITY;
ALTER TABLE customer_product_prices ENABLE ROW LEVEL SECURITY;
ALTER TABLE contracts ENABLE ROW LEVEL SECURITY;
ALTER TABLE contract_prices ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their organization's pricing tiers" ON pricing_tiers
  FOR SELECT USING (is_organization_member(organization_id));

CREATE POLICY "Users can view volume pricing" ON volume_pricing
  FOR SELECT USING (true);

CREATE POLICY "Users can view their organization's custom prices" ON customer_product_prices
  FOR SELECT USING (is_organization_member(organization_id));

CREATE POLICY "Users can view their organization's contracts" ON contracts
  FOR SELECT USING (is_organization_member(organization_id));

CREATE POLICY "Users can view contract prices" ON contract_prices
  FOR SELECT USING (
    contract_id IN (
      SELECT id FROM contracts WHERE is_organization_member(organization_id)
    )
  );

Run migration:
supabase db reset
```

---

## Step 3.2: Update Product Display to Use Custom Pricing

**Prompt for Augment**:
```
Update ProductCard component in /apps/web/src/components/ProductCard.tsx to use custom pricing:

'use client'

import { Product } from '@b2b-plus/supabase'
import Image from 'next/image'
import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'

export default function ProductCard({ product }: { product: Product }) {
  const [quantity, setQuantity] = useState(1)
  const [price, setPrice] = useState(product.base_price)
  const [loading, setLoading] = useState(false)
  const [adding, setAdding] = useState(false)
  const supabase = createClient()

  // Fetch custom price when component mounts or quantity changes
  useEffect(() => {
    fetchPrice()
  }, [quantity])

  const fetchPrice = async () => {
    setLoading(true)
    const { data: { user } } = await supabase.auth.getUser()
    
    if (!user) {
      setPrice(product.base_price)
      setLoading(false)
      return
    }

    // Get user's organization
    const { data: profile } = await supabase
      .from('profiles')
      .select('current_organization_id')
      .eq('id', user.id)
      .single()

    if (!profile?.current_organization_id) {
      setPrice(product.base_price)
      setLoading(false)
      return
    }

    // Call RPC to get resolved price
    const { data, error } = await supabase.rpc('get_customer_price', {
      p_organization_id: profile.current_organization_id,
      p_product_id: product.id,
      p_quantity: quantity
    })

    if (data && !error) {
      setPrice(parseFloat(data))
    } else {
      setPrice(product.base_price)
    }
    
    setLoading(false)
  }

  const addToCart = async () => {
    setAdding(true)
    const { data: { user } } = await supabase.auth.getUser()
    
    if (!user) {
      alert('Please login to add items to cart')
      setAdding(false)
      return
    }

    const { error } = await supabase
      .from('cart_items')
      .upsert({
        user_id: user.id,
        product_id: product.id,
        organization_id: product.organization_id,
        quantity
      }, {
        onConflict: 'user_id,product_id',
        ignoreDuplicates: false
      })

    if (error) {
      alert('Error adding to cart')
      console.error(error)
    } else {
      alert('Added to cart!')
    }
    
    setAdding(false)
  }

  return (
    <div className="border rounded-lg p-4 hover:shadow-lg transition-shadow">
      {product.image_url && (
        <div className="relative h-48 mb-4">
          <Image
            src={product.image_url}
            alt={product.name}
            fill
            className="object-cover rounded"
          />
        </div>
      )}
      <h3 className="font-semibold text-lg mb-2">{product.name}</h3>
      <p className="text-sm text-gray-600 mb-2">{product.sku}</p>
      <p className="text-sm text-gray-500 mb-4 line-clamp-2">{product.description}</p>
      <div className="flex items-center justify-between mb-4">
        <div>
          <span className="text-2xl font-bold">
            ${loading ? '...' : price.toFixed(2)}
          </span>
          {price < product.base_price && (
            <span className="ml-2 text-sm text-gray-400 line-through">
              ${product.base_price.toFixed(2)}
            </span>
          )}
        </div>
        <span className="text-sm text-gray-500">per {product.unit_of_measure}</span>
      </div>
      <div className="flex gap-2">
        <input
          type="number"
          min="1"
          value={quantity}
          onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}
          className="w-20 border rounded px-2 py-1"
        />
        <button
          onClick={addToCart}
          disabled={adding}
          className="flex-1 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {adding ? 'Adding...' : 'Add to Cart'}
        </button>
      </div>
    </div>
  )
}
```

---

## Step 3.3: Create Bulk Order CSV Upload

**Prompt for Augment**:
```
Create bulk order upload page in /apps/web/src/app/bulk-order/page.tsx:

'use client'

import { useState } from 'react'
import { createClient } from '@/lib/supabase/client'
import Papa from 'papaparse'
import { useRouter } from 'next/navigation'

type BulkOrderRow = {
  sku: string
  quantity: number
  valid: boolean
  error?: string
  product?: any
}

export default function BulkOrderPage() {
  const [file, setFile] = useState<File | null>(null)
  const [rows, setRows] = useState<BulkOrderRow[]>([])
  const [processing, setProcessing] = useState(false)
  const [validationComplete, setValidationComplete] = useState(false)
  const supabase = createClient()
  const router = useRouter()

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files?.[0]) {
      setFile(e.target.files[0])
      setRows([])
      setValidationComplete(false)
    }
  }

  const processFile = async () => {
    if (!file) return

    setProcessing(true)
    setValidationComplete(false)

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: async (results) => {
        const parsedRows: BulkOrderRow[] = []

        // Validate each row
        for (const row of results.data as any[]) {
          const sku = row.sku || row.SKU || row.item_number || row['Item Number']
          const quantity = parseInt(row.quantity || row.Quantity || row.qty || row.Qty || '0')

          if (!sku) {
            parsedRows.push({
              sku: '',
              quantity: 0,
              valid: false,
              error: 'Missing SKU'
            })
            continue
          }

          if (!quantity || quantity <= 0) {
            parsedRows.push({
              sku,
              quantity: 0,
              valid: false,
              error: 'Invalid quantity'
            })
            continue
          }

          // Look up product
          const { data: product, error } = await supabase
            .from('products')
            .select('*')
            .eq('sku', sku.trim())
            .single()

          if (error || !product) {
            parsedRows.push({
              sku,
              quantity,
              valid: false,
              error: 'Product not found'
            })
          } else {
            parsedRows.push({
              sku,
              quantity,
              valid: true,
              product
            })
          }
        }

        setRows(parsedRows)
        setValidationComplete(true)
        setProcessing(false)
      },
      error: (error) => {
        alert('Error parsing CSV: ' + error.message)
        setProcessing(false)
      }
    })
  }

  const addToCart = async () => {
    setProcessing(true)

    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      alert('Please login')
      setProcessing(false)
      return
    }

    const validRows = rows.filter(row => row.valid)

    try {
      // Add each valid row to cart
      for (const row of validRows) {
        // Check if item already in cart
        const { data: existingItem } = await supabase
          .from('cart_items')
          .select('*')
          .eq('user_id', user.id)
          .eq('product_id', row.product.id)
          .single()

        if (existingItem) {
          // Update quantity
          await supabase
            .from('cart_items')
            .update({ quantity: existingItem.quantity + row.quantity })
            .eq('id', existingItem.id)
        } else {
          // Insert new
          await supabase
            .from('cart_items')
            .insert({
              user_id: user.id,
              organization_id: row.product.organization_id,
              product_id: row.product.id,
              quantity: row.quantity
            })
        }
      }

      router.push('/cart')
    } catch (error) {
      console.error('Error adding to cart:', error)
      alert('Failed to add items to cart')
      setProcessing(false)
    }
  }

  const downloadTemplate = () => {
    const template = 'sku,quantity\nCUP-16OZ-WHT-1000,5\nLID-16OZ-BLK-1000,5'
    const blob = new Blob([template], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'bulk-order-template.csv'
    a.click()
  }

  const validCount = rows.filter(r => r.valid).length
  const invalidCount = rows.filter(r => !r.valid).length

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Bulk Order Upload</h1>

      <div className="max-w-2xl">
        {/* Instructions */}
        <div className="bg-blue-50 p-4 rounded mb-6">
          <h2 className="font-semibold mb-2">Instructions:</h2>
          <ol className="list-decimal list-inside space-y-1 text-sm">
            <li>Download the CSV template below</li>
            <li>Fill in your SKUs and quantities</li>
            <li>Upload the completed file</li>
            <li>Review validation results</li>
            <li>Add valid items to cart</li>
          </ol>
        </div>

        {/* Template download */}
        <button
          onClick={downloadTemplate}
          className="mb-6 text-blue-600 hover:underline"
        >
          📥 Download CSV Template
        </button>

        {/* File upload */}
        <div className="mb-6">
          <label className="block text-sm font-medium mb-2">Upload CSV File</label>
          <input
            type="file"
            accept=".csv"
            onChange={handleFileChange}
            className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
          />
        </div>

        {/* Process button */}
        {file && !validationComplete && (
          <button
            onClick={processFile}
            disabled={processing}
            className="w-full bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 disabled:opacity-50"
          >
            {processing ? 'Processing...' : 'Validate File'}
          </button>
        )}

        {/* Validation results */}
        {validationComplete && (
          <div className="mt-8">
            <div className="flex gap-4 mb-4">
              <div className="bg-green-50 p-4 rounded flex-1">
                <p className="text-sm text-gray-600">Valid Items</p>
                <p className="text-2xl font-bold text-green-700">{validCount}</p>
              </div>
              <div className="bg-red-50 p-4 rounded flex-1">
                <p className="text-sm text-gray-600">Invalid Items</p>
                <p className="text-2xl font-bold text-red-700">{invalidCount}</p>
              </div>
            </div>

            {/* Results table */}
            <div className="border rounded overflow-hidden mb-4">
              <table className="w-full text-sm">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-2 text-left">SKU</th>
                    <th className="px-4 py-2 text-left">Quantity</th>
                    <th className="px-4 py-2 text-left">Status</th>
                  </tr>
                </thead>
                <tbody>
                  {rows.map((row, idx) => (
                    <tr key={idx} className={row.valid ? '' : 'bg-red-50'}>
                      <td className="px-4 py-2">{row.sku}</td>
                      <td className="px-4 py-2">{row.quantity}</td>
                      <td className="px-4 py-2">
                        {row.valid ? (
                          <span className="text-green-600">✓ Valid</span>
                        ) : (
                          <span className="text-red-600">✗ {row.error}</span>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Add to cart button */}
            {validCount > 0 && (
              <button
                onClick={addToCart}
                disabled={processing}
                className="w-full bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 disabled:opacity-50"
              >
                {processing ? 'Adding to Cart...' : `Add ${validCount} Items to Cart`}
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  )
}

Install PapaParse:
cd apps/web
npm install papaparse
npm install -D @types/papaparse
```

---

## Step 3.4: Add AI-Enhanced Excel Import with Column Mapping

**Prompt for Augment**:
```
Create AI-enhanced Excel import page in /apps/web/src/app/bulk-order/excel/page.tsx:

'use client'

import { useState } from 'react'
import { createClient } from '@/lib/supabase/client'
import * as XLSX from 'xlsx'

type ColumnMapping = {
  [key: string]: string // Excel column -> DB field
}

export default function ExcelImportPage() {
  const [file, setFile] = useState<File | null>(null)
  const [headers, setHeaders] = useState<string[]>([])
  const [suggestedMapping, setSuggestedMapping] = useState<ColumnMapping>({})
  const [mapping, setMapping] = useState<ColumnMapping>({})
  const [processing, setProcessing] = useState(false)
  const [step, setStep] = useState<'upload' | 'map' | 'validate'>('upload')
  const supabase = createClient()

  const dbFields = [
    { value: 'sku', label: 'SKU / Item Number' },
    { value: 'quantity', label: 'Quantity' },
    { value: 'ignore', label: '(Ignore this column)' }
  ]

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files?.[0]) return

    const file = e.target.files[0]
    setFile(file)
    setProcessing(true)

    // Read Excel file
    const data = await file.arrayBuffer()
    const workbook = XLSX.read(data, { type: 'array' })
    const sheetName = workbook.SheetNames[0]
    const worksheet = workbook.Sheets[sheetName]
    const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][]

    if (json.length > 0) {
      const headers = json[0].map(h => h?.toString() || '')
      setHeaders(headers)

      // Get AI suggestions for mapping
      await getAISuggestions(headers)
    }

    setProcessing(false)
    setStep('map')
  }

  const getAISuggestions = async (headers: string[]) => {
    try {
      // Call Edge Function that uses OpenAI
      const response = await fetch('/api/map-columns', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          headers,
          dbFields: dbFields.map(f => f.value)
        })
      })

      if (response.ok) {
        const { mapping } = await response.json()
        setSuggestedMapping(mapping)
        setMapping(mapping)
      }
    } catch (error) {
      console.error('AI mapping failed, using fallback:', error)
      // Fallback to simple matching
      const fallbackMapping: ColumnMapping = {}
      headers.forEach(header => {
        const lower = header.toLowerCase()
        if (lower.includes('sku') || lower.includes('item')) {
          fallbackMapping[header] = 'sku'
        } else if (lower.includes('qty') || lower.includes('quantity')) {
          fallbackMapping[header] = 'quantity'
        } else {
          fallbackMapping[header] = 'ignore'
        }
      })
      setSuggestedMapping(fallbackMapping)
      setMapping(fallbackMapping)
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Excel Import (AI-Powered)</h1>

      {/* Step 1: Upload */}
      {step === 'upload' && (
        <div className="max-w-2xl">
          <div className="bg-blue-50 p-4 rounded mb-6">
            <h2 className="font-semibold mb-2">AI-Enhanced Import</h2>
            <p className="text-sm">
              Our AI will automatically detect and map your spreadsheet columns to the correct fields.
            </p>
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">Upload Excel File</label>
            <input
              type="file"
              accept=".xlsx,.xls,.csv"
              onChange={handleFileChange}
              disabled={processing}
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
          </div>

          {processing && (
            <div className="text-center py-8">
              <p className="text-gray-600">Processing file and detecting columns...</p>
            </div>
          )}
        </div>
      )}

      {/* Step 2: Column Mapping */}
      {step === 'map' && (
        <div className="max-w-4xl">
          <div className="bg-green-50 p-4 rounded mb-6">
            <p className="text-sm">
              ✓ AI has suggested column mappings below. Review and adjust if needed.
            </p>
          </div>

          <table className="w-full border rounded overflow-hidden mb-6">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left">Excel Column</th>
                <th className="px-4 py-3 text-left">Maps To</th>
              </tr>
            </thead>
            <tbody>
              {headers.map((header, idx) => (
                <tr key={idx} className="border-t">
                  <td className="px-4 py-3 font-medium">{header}</td>
                  <td className="px-4 py-3">
                    <select
                      value={mapping[header] || 'ignore'}
                      onChange={(e) => setMapping({ ...mapping, [header]: e.target.value })}
                      className="w-full border rounded px-3 py-2"
                    >
                      {dbFields.map(field => (
                        <option key={field.value} value={field.value}>
                          {field.label}
                        </option>
                      ))}
                    </select>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          <div className="flex gap-4">
            <button
              onClick={() => setStep('upload')}
              className="px-6 py-3 border rounded hover:bg-gray-50"
            >
              ← Back
            </button>
            <button
              onClick={() => setStep('validate')}
              className="flex-1 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700"
            >
              Continue to Validation
            </button>
          </div>
        </div>
      )}

      {/* Step 3: Validation (similar to CSV upload) */}
      {step === 'validate' && (
        <div className="max-w-4xl">
          <p className="text-gray-600">Validation step coming next...</p>
        </div>
      )}
    </div>
  )
}

Create API route for AI column mapping in /apps/web/src/app/api/map-columns/route.ts:

import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
})

export async function POST(req: NextRequest) {
  try {
    const { headers, dbFields } = await req.json()

    const prompt = `Map these spreadsheet columns to database fields:

Spreadsheet columns: ${headers.join(', ')}
Database fields: ${dbFields.join(', ')}

Return a JSON mapping object where keys are spreadsheet column names and values are database field names.
Use "ignore" for columns that don't match any database field.

Example:
{"Item Number": "sku", "Qty": "quantity", "Description": "ignore"}

Respond ONLY with valid JSON, no explanation.`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'You are a data mapping assistant. Return only valid JSON.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 500
    })

    const mapping = JSON.parse(completion.choices[0].message.content || '{}')

    return NextResponse.json({ mapping })
  } catch (error) {
    console.error('AI mapping error:', error)
    return NextResponse.json({ error: 'Failed to map columns' }, { status: 500 })
  }
}

Install dependencies:
cd apps/web
npm install openai xlsx

Add OPENAI_API_KEY to .env.local:
OPENAI_API_KEY=your_openai_api_key
```

---

## Step 3.5: Implement OpenAI Semantic Search

**Location**: `/supabase/migrations/20240103000001_semantic_search.sql`

**Prompt for Augment**:
```
Add semantic search capability to products:

-- Products already have embedding column from Phase 1
-- Now create function to search by embedding

CREATE OR REPLACE FUNCTION search_products_semantic(
  query_embedding vector(1536),
  match_threshold float DEFAULT 0.7,
  match_count int DEFAULT 10,
  p_organization_id UUID DEFAULT NULL
) RETURNS TABLE (
  id UUID,
  name TEXT,
  sku TEXT,
  description TEXT,
  category TEXT,
  base_price DECIMAL(10,2),
  image_url TEXT,
  similarity float
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    p.id,
    p.name,
    p.sku,
    p.description,
    p.category,
    p.base_price,
    p.image_url,
    1 - (p.embedding <=> query_embedding) as similarity
  FROM products p
  WHERE p.in_stock = true
    AND (p_organization_id IS NULL OR p.organization_id = p_organization_id)
    AND 1 - (p.embedding <=> query_embedding) > match_threshold
  ORDER BY p.embedding <=> query_embedding
  LIMIT match_count;
END;
$$ LANGUAGE plpgsql;

Run migration:
supabase db reset
```

**Create product embedding generator**:

Create Edge Function to generate embeddings:
```
supabase functions new generate-embeddings

Create /supabase/functions/generate-embeddings/index.ts:

import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const openaiApiKey = Deno.env.get('OPENAI_API_KEY')!

serve(async (req) => {
  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    // Get products without embeddings
    const { data: products } = await supabase
      .from('products')
      .select('id, name, description, category, brand')
      .is('embedding', null)
      .limit(100)

    if (!products || products.length === 0) {
      return new Response(JSON.stringify({ message: 'No products to process' }), {
        headers: { 'Content-Type': 'application/json' }
      })
    }

    let processed = 0

    for (const product of products) {
      // Create text for embedding
      const text = `${product.name} ${product.description || ''} ${product.category || ''} ${product.brand || ''}`

      // Get embedding from OpenAI
      const response = await fetch('https://api.openai.com/v1/embeddings', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'text-embedding-3-small',
          input: text
        })
      })

      const data = await response.json()
      const embedding = data.data[0].embedding

      // Update product with embedding
      await supabase
        .from('products')
        .update({ embedding })
        .eq('id', product.id)

      processed++
    }

    return new Response(JSON.stringify({ processed }), {
      headers: { 'Content-Type': 'application/json' }
    })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }
})

Deploy and set secret:
supabase functions deploy generate-embeddings --no-verify-jwt
supabase secrets set OPENAI_API_KEY=your_openai_api_key

Run once to generate embeddings for existing products:
curl -X POST https://YOUR_PROJECT.supabase.co/functions/v1/generate-embeddings \
  -H "Authorization: Bearer YOUR_ANON_KEY"
```

**Create semantic search component**:

```
Update /apps/web/src/app/products/page.tsx to add semantic search:

'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import ProductCard from '@/components/ProductCard'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true // Only for demo, use API route in production
})

export default function ProductsPage() {
  const [products, setProducts] = useState([])
  const [searchQuery, setSearchQuery] = useState('')
  const [searching, setSearching] = useState(false)
  const supabase = createClient()

  useEffect(() => {
    loadProducts()
  }, [])

  const loadProducts = async () => {
    const { data } = await supabase
      .from('products')
      .select('*')
      .eq('in_stock', true)
      .order('name')
      .limit(20)

    setProducts(data || [])
  }

  const handleSemanticSearch = async () => {
    if (!searchQuery.trim()) {
      loadProducts()
      return
    }

    setSearching(true)

    try {
      // Get embedding for search query
      const embedding = await openai.embeddings.create({
        model: 'text-embedding-3-small',
        input: searchQuery
      })

      const queryEmbedding = embedding.data[0].embedding

      // Search using semantic similarity
      const { data } = await supabase.rpc('search_products_semantic', {
        query_embedding: queryEmbedding,
        match_threshold: 0.7,
        match_count: 20
      })

      setProducts(data || [])
    } catch (error) {
      console.error('Search error:', error)
    }

    setSearching(false)
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Products</h1>

      {/* Search bar */}
      <div className="mb-8 flex gap-2">
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          onKeyDown={(e) => e.key === 'Enter' && handleSemanticSearch()}
          placeholder="Search products (e.g., 'disposable cups for hot coffee')..."
          className="flex-1 border rounded px-4 py-2"
        />
        <button
          onClick={handleSemanticSearch}
          disabled={searching}
          className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {searching ? 'Searching...' : 'Search'}
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {products?.map((product) => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  )
}
```

---

## Step 3.6: Implement Offline Capability with WatermelonDB (Mobile)

**Prompt for Augment**:
```
1. Install WatermelonDB and dependencies:
cd apps/mobile
npm install @nozbe/watermelondb @nozbe/with-observables

2. Create database schema in /apps/mobile/lib/watermelon/schema.ts:

import { appSchema, tableSchema } from '@nozbe/watermelondb'

export default appSchema({
  version: 1,
  tables: [
    tableSchema({
      name: 'products',
      columns: [
        { name: 'sku', type: 'string', isIndexed: true },
        { name: 'name', type: 'string' },
        { name: 'description', type: 'string', isOptional: true },
        { name: 'category', type: 'string' },
        { name: 'base_price', type: 'number' },
        { name: 'unit_of_measure', type: 'string' },
        { name: 'in_stock', type: 'boolean' },
        { name: 'image_url', type: 'string', isOptional: true },
        { name: 'server_id', type: 'string', isIndexed: true },
        { name: 'created_at', type: 'number' },
        { name: 'updated_at', type: 'number' }
      ]
    }),
    tableSchema({
      name: 'cart_items',
      columns: [
        { name: 'product_id', type: 'string', isIndexed: true },
        { name: 'quantity', type: 'number' },
        { name: 'synced', type: 'boolean' },
        { name: 'server_id', type: 'string', isOptional: true },
        { name: 'created_at', type: 'number' },
        { name: 'updated_at', type: 'number' }
      ]
    }),
    tableSchema({
      name: 'orders',
      columns: [
        { name: 'order_number', type: 'string' },
        { name: 'status', type: 'string' },
        { name: 'total', type: 'number' },
        { name: 'submitted_at', type: 'number', isOptional: true },
        { name: 'synced', type: 'boolean' },
        { name: 'server_id', type: 'string', isOptional: true },
        { name: 'created_at', type: 'number' },
        { name: 'updated_at', type: 'number' }
      ]
    })
  ]
})

3. Create models in /apps/mobile/lib/watermelon/models/:

// Product.ts
import { Model } from '@nozbe/watermelondb'
import { field, date, readonly } from '@nozbe/watermelondb/decorators'

export default class Product extends Model {
  static table = 'products'

  @field('sku') sku!: string
  @field('name') name!: string
  @field('description') description?: string
  @field('category') category!: string
  @field('base_price') basePrice!: number
  @field('unit_of_measure') unitOfMeasure!: string
  @field('in_stock') inStock!: boolean
  @field('image_url') imageUrl?: string
  @field('server_id') serverId!: string
  @readonly @date('created_at') createdAt!: Date
  @readonly @date('updated_at') updatedAt!: Date
}

// CartItem.ts
import { Model } from '@nozbe/watermelondb'
import { field, date, relation, readonly } from '@nozbe/watermelondb/decorators'
import Product from './Product'

export default class CartItem extends Model {
  static table = 'cart_items'

  static associations = {
    products: { type: 'belongs_to', key: 'product_id' }
  }

  @field('product_id') productId!: string
  @field('quantity') quantity!: number
  @field('synced') synced!: boolean
  @field('server_id') serverId?: string
  @relation('products', 'product_id') product!: Product
  @readonly @date('created_at') createdAt!: Date
  @readonly @date('updated_at') updatedAt!: Date
}

4. Create database instance in /apps/mobile/lib/watermelon/database.ts:

import { Database } from '@nozbe/watermelondb'
import SQLiteAdapter from '@nozbe/watermelondb/adapters/sqlite'
import schema from './schema'
import Product from './models/Product'
import CartItem from './models/CartItem'

const adapter = new SQLiteAdapter({
  schema,
  dbName: 'b2bplus'
})

export const database = new Database({
  adapter,
  modelClasses: [Product, CartItem]
})

5. Create sync function in /apps/mobile/lib/watermelon/sync.ts:

import { synchronize } from '@nozbe/watermelondb/sync'
import { database } from './database'
import { supabase } from '../supabase'

export async function sync() {
  await synchronize({
    database,
    pullChanges: async ({ lastPulledAt }) => {
      // Pull changes from Supabase since lastPulledAt
      const { data: products } = await supabase
        .from('products')
        .select('*')
        .gt('updated_at', lastPulledAt ? new Date(lastPulledAt).toISOString() : '1970-01-01')

      const { data: cartItems } = await supabase
        .from('cart_items')
        .select('*')
        .gt('updated_at', lastPulledAt ? new Date(lastPulledAt).toISOString() : '1970-01-01')

      const changes = {
        products: {
          created: products?.filter(p => new Date(p.created_at) > new Date(lastPulledAt || 0)).map(p => ({
            id: p.id,
            sku: p.sku,
            name: p.name,
            description: p.description,
            category: p.category,
            base_price: p.base_price,
            unit_of_measure: p.unit_of_measure,
            in_stock: p.in_stock,
            image_url: p.image_url,
            server_id: p.id,
            created_at: new Date(p.created_at).getTime(),
            updated_at: new Date(p.updated_at).getTime()
          })) || [],
          updated: products?.filter(p => new Date(p.created_at) <= new Date(lastPulledAt || 0)).map(p => ({
            id: p.id,
            sku: p.sku,
            name: p.name,
            description: p.description,
            category: p.category,
            base_price: p.base_price,
            unit_of_measure: p.unit_of_measure,
            in_stock: p.in_stock,
            image_url: p.image_url,
            server_id: p.id,
            created_at: new Date(p.created_at).getTime(),
            updated_at: new Date(p.updated_at).getTime()
          })) || [],
          deleted: []
        },
        cart_items: {
          created: cartItems?.filter(c => new Date(c.created_at) > new Date(lastPulledAt || 0)).map(c => ({
            id: c.id,
            product_id: c.product_id,
            quantity: c.quantity,
            synced: true,
            server_id: c.id,
            created_at: new Date(c.created_at).getTime(),
            updated_at: new Date(c.updated_at).getTime()
          })) || [],
          updated: [],
          deleted: []
        }
      }

      return { changes, timestamp: Date.now() }
    },
    pushChanges: async ({ changes }) => {
      // Push local changes to Supabase
      const { data: { user } } = await supabase.auth.getUser()
      if (!user) return

      // Handle cart item changes
      if (changes.cart_items) {
        for (const item of changes.cart_items.created) {
          await supabase.from('cart_items').insert({
            user_id: user.id,
            product_id: item.product_id,
            quantity: item.quantity
          })
        }

        for (const item of changes.cart_items.updated) {
          if (item.server_id) {
            await supabase
              .from('cart_items')
              .update({ quantity: item.quantity })
              .eq('id', item.server_id)
          }
        }

        for (const id of changes.cart_items.deleted) {
          const item = await database.get('cart_items').find(id)
          if (item.serverId) {
            await supabase.from('cart_items').delete().eq('id', item.serverId)
          }
        }
      }
    }
  })
}

6. Use WatermelonDB in components:

Update /apps/mobile/app/(tabs)/index.tsx to use WatermelonDB:

import { useEffect, useState } from 'react'
import { View, Text, FlatList } from 'react-native'
import { database } from '@/lib/watermelon/database'
import { sync } from '@/lib/watermelon/sync'
import withObservables from '@nozbe/with-observables'

function ProductsScreen({ products }) {
  useEffect(() => {
    // Sync on mount
    sync()
  }, [])

  return (
    <View style={{ flex: 1 }}>
      <FlatList
        data={products}
        renderItem={({ item }) => (
          <View style={{ padding: 16, borderBottomWidth: 1 }}>
            <Text style={{ fontSize: 16, fontWeight: 'bold' }}>{item.name}</Text>
            <Text>{item.sku}</Text>
            <Text>${item.basePrice}</Text>
          </View>
        )}
        keyExtractor={item => item.id}
      />
    </View>
  )
}

// Enhance with observables for real-time updates
export default withObservables([], () => ({
  products: database.get('products').query().observe()
}))(ProductsScreen)
```

---

## Phase 3 Complete ✅

You now have:
- ✅ CSV bulk order upload with validation
- ✅ AI-enhanced Excel import with column mapping
- ✅ Role-based pricing system (customer, contract, volume, tier)
- ✅ OpenAI semantic search for products
- ✅ Offline capability with WatermelonDB (mobile)
- ✅ Product embedding generation for fuzzy search

**Costs at Phase 3**:
- Supabase Pro: $25/month
- OpenAI (embeddings + GPT-4o-mini): $50-100/month
- Twilio: ~$8/month
- Resend: $0/month
- **Total: ~$83-133/month**

**Next**: Proceed to Phase 4 for the container builder with 3D visualization and bin packing.

See "B2B+ Phase 4 Implementation Guide" artifact.
