# B2B+ Phase 2: B2B Essentials Implementation

**Duration**: 3-4 weeks  
**Goal**: Order placement, history, quick reorder, communications, push notifications

## Phase 2 Overview

By the end of Phase 2, you will have:
- ✅ Complete checkout and order placement
- ✅ Order history with filtering and search
- ✅ Quick reorder functionality
- ✅ Multiple shipping addresses per organization
- ✅ Purchase order tracking
- ✅ Invoice generation
- ✅ SMS notifications (Twilio)
- ✅ Email notifications (Resend)
- ✅ Push notifications (Expo)

---

## Step 2.1: Complete Checkout Flow - Web

**Prompt for Augment**:
```
Create checkout page in /apps/web/src/app/checkout/page.tsx:

import { createClient } from '@/lib/supabase/server'
import { redirect } from 'next/navigation'
import CheckoutForm from '@/components/CheckoutForm'

export default async function CheckoutPage() {
  const supabase = createClient()
  
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) redirect('/auth/login')

  // Get cart items with products
  const { data: cartItems } = await supabase
    .from('cart_items')
    .select(`
      *,
      products (*)
    `)
    .eq('user_id', user.id)

  if (!cartItems || cartItems.length === 0) {
    redirect('/cart')
  }

  // Get user's profile to get organization
  const { data: profile } = await supabase
    .from('profiles')
    .select('current_organization_id')
    .eq('id', user.id)
    .single()

  // Get shipping addresses
  const { data: addresses } = await supabase
    .from('shipping_addresses')
    .select('*')
    .eq('organization_id', profile?.current_organization_id)
    .order('is_default', { ascending: false })

  return (
    <CheckoutForm 
      cartItems={cartItems}
      addresses={addresses || []}
      userId={user.id}
      organizationId={profile?.current_organization_id!}
    />
  )
}

Create CheckoutForm component in /apps/web/src/components/CheckoutForm.tsx:

'use client'

import { useState } from 'react'
import { createClient } from '@/lib/supabase/client'
import { useRouter } from 'next/navigation'

type CartItemWithProduct = {
  id: string
  quantity: number
  products: {
    id: string
    name: string
    sku: string
    base_price: number
  }
}

type ShippingAddress = {
  id: string
  label: string
  contact_name: string
  phone: string
  street_address: string
  street_address2: string | null
  city: string
  state: string
  postal_code: string
}

export default function CheckoutForm({
  cartItems,
  addresses,
  userId,
  organizationId
}: {
  cartItems: CartItemWithProduct[]
  addresses: ShippingAddress[]
  userId: string
  organizationId: string
}) {
  const [selectedAddressId, setSelectedAddressId] = useState(addresses[0]?.id)
  const [poNumber, setPoNumber] = useState('')
  const [notes, setNotes] = useState('')
  const [submitting, setSubmitting] = useState(false)
  const supabase = createClient()
  const router = useRouter()

  const subtotal = cartItems.reduce(
    (sum, item) => sum + item.quantity * item.products.base_price,
    0
  )
  const tax = subtotal * 0.0875 // 8.75% example tax rate
  const shippingCost = subtotal > 500 ? 0 : 50 // Free shipping over $500
  const total = subtotal + tax + shippingCost

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setSubmitting(true)

    try {
      // Create order
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert({
          organization_id: organizationId,
          user_id: userId,
          po_number: poNumber || null,
          status: 'submitted',
          subtotal,
          tax,
          shipping_cost: shippingCost,
          total,
          shipping_address_id: selectedAddressId,
          notes: notes || null,
          submitted_at: new Date().toISOString()
        })
        .select()
        .single()

      if (orderError) throw orderError

      // Create order items
      const orderItems = cartItems.map(item => ({
        order_id: order.id,
        product_id: item.products.id,
        sku: item.products.sku,
        name: item.products.name,
        quantity: item.quantity,
        unit_price: item.products.base_price,
        line_total: item.quantity * item.products.base_price
      }))

      const { error: itemsError } = await supabase
        .from('order_items')
        .insert(orderItems)

      if (itemsError) throw itemsError

      // Clear cart
      const { error: clearError } = await supabase
        .from('cart_items')
        .delete()
        .eq('user_id', userId)

      if (clearError) throw clearError

      // Update last_used_at for the selected address
      await supabase
        .from('shipping_addresses')
        .update({ last_used_at: new Date().toISOString() })
        .eq('id', selectedAddressId)

      // Redirect to order confirmation
      router.push(`/orders/${order.id}`)
    } catch (error) {
      console.error('Error placing order:', error)
      alert('Failed to place order. Please try again.')
      setSubmitting(false)
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Checkout</h1>
      <div className="grid md:grid-cols-2 gap-8">
        {/* Left column: Order details */}
        <div>
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Shipping address selection */}
            <div>
              <label className="block text-sm font-medium mb-2">
                Shipping Address
              </label>
              <select
                value={selectedAddressId}
                onChange={(e) => setSelectedAddressId(e.target.value)}
                required
                className="w-full border rounded px-3 py-2"
              >
                {addresses.map((addr) => (
                  <option key={addr.id} value={addr.id}>
                    {addr.label} - {addr.street_address}, {addr.city}, {addr.state}
                  </option>
                ))}
              </select>
            </div>

            {/* PO number (optional) */}
            <div>
              <label htmlFor="poNumber" className="block text-sm font-medium mb-2">
                PO Number (Optional)
              </label>
              <input
                id="poNumber"
                type="text"
                value={poNumber}
                onChange={(e) => setPoNumber(e.target.value)}
                className="w-full border rounded px-3 py-2"
                placeholder="Enter your purchase order number"
              />
            </div>

            {/* Order notes */}
            <div>
              <label htmlFor="notes" className="block text-sm font-medium mb-2">
                Order Notes (Optional)
              </label>
              <textarea
                id="notes"
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                rows={3}
                className="w-full border rounded px-3 py-2"
                placeholder="Special delivery instructions, etc."
              />
            </div>

            <button
              type="submit"
              disabled={submitting}
              className="w-full bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              {submitting ? 'Placing Order...' : 'Place Order'}
            </button>
          </form>
        </div>

        {/* Right column: Order summary */}
        <div>
          <div className="bg-gray-50 rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Order Summary</h2>
            <div className="space-y-3 mb-4">
              {cartItems.map((item) => (
                <div key={item.id} className="flex justify-between text-sm">
                  <span>
                    {item.products.name} ({item.quantity}x)
                  </span>
                  <span>${(item.quantity * item.products.base_price).toFixed(2)}</span>
                </div>
              ))}
            </div>
            <div className="border-t pt-4 space-y-2">
              <div className="flex justify-between">
                <span>Subtotal</span>
                <span>${subtotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Tax (8.75%)</span>
                <span>${tax.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Shipping</span>
                <span>{shippingCost === 0 ? 'FREE' : `$${shippingCost.toFixed(2)}`}</span>
              </div>
              <div className="border-t pt-2 flex justify-between font-bold text-lg">
                <span>Total</span>
                <span>${total.toFixed(2)}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
```

---

## Step 2.2: Order History with Filtering

**Prompt for Augment**:
```
Create orders page in /apps/web/src/app/orders/page.tsx:

import { createClient } from '@/lib/supabase/server'
import { redirect } from 'next/navigation'
import OrderList from '@/components/OrderList'

export default async function OrdersPage({
  searchParams
}: {
  searchParams: { status?: string; search?: string }
}) {
  const supabase = createClient()
  
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) redirect('/auth/login')

  // Build query
  let query = supabase
    .from('orders')
    .select(`
      *,
      order_items (
        *,
        products (name, sku)
      ),
      shipping_addresses (*)
    `)
    .eq('user_id', user.id)
    .order('created_at', { ascending: false })

  // Apply status filter
  if (searchParams.status && searchParams.status !== 'all') {
    query = query.eq('status', searchParams.status)
  }

  // Apply search filter (by order number or PO number)
  if (searchParams.search) {
    query = query.or(`order_number.ilike.%${searchParams.search}%,po_number.ilike.%${searchParams.search}%`)
  }

  const { data: orders } = await query

  return <OrderList initialOrders={orders || []} />
}

Create OrderList component in /apps/web/src/components/OrderList.tsx:

'use client'

import { useState } from 'react'
import Link from 'next/link'
import { useRouter, useSearchParams } from 'next/navigation'

type Order = {
  id: string
  order_number: string
  po_number: string | null
  status: string
  total: number
  submitted_at: string | null
  order_items: Array<{
    quantity: number
    products: { name: string; sku: string }
  }>
}

export default function OrderList({ initialOrders }: { initialOrders: Order[] }) {
  const [orders] = useState(initialOrders)
  const [searchTerm, setSearchTerm] = useState('')
  const router = useRouter()
  const searchParams = useSearchParams()
  const currentStatus = searchParams.get('status') || 'all'

  const handleStatusFilter = (status: string) => {
    const params = new URLSearchParams(searchParams)
    if (status === 'all') {
      params.delete('status')
    } else {
      params.set('status', status)
    }
    router.push(`/orders?${params.toString()}`)
  }

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    const params = new URLSearchParams(searchParams)
    if (searchTerm) {
      params.set('search', searchTerm)
    } else {
      params.delete('search')
    }
    router.push(`/orders?${params.toString()}`)
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'submitted': return 'bg-blue-100 text-blue-800'
      case 'processing': return 'bg-yellow-100 text-yellow-800'
      case 'shipped': return 'bg-purple-100 text-purple-800'
      case 'delivered': return 'bg-green-100 text-green-800'
      case 'cancelled': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Order History</h1>

      {/* Filters */}
      <div className="mb-6 flex flex-wrap gap-4">
        {/* Status filter */}
        <div className="flex gap-2">
          {['all', 'submitted', 'processing', 'shipped', 'delivered', 'cancelled'].map((status) => (
            <button
              key={status}
              onClick={() => handleStatusFilter(status)}
              className={`px-4 py-2 rounded-lg capitalize ${
                currentStatus === status
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              {status}
            </button>
          ))}
        </div>

        {/* Search */}
        <form onSubmit={handleSearch} className="flex gap-2 ml-auto">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Search order #, PO #"
            className="border rounded px-3 py-2 w-64"
          />
          <button
            type="submit"
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Search
          </button>
        </form>
      </div>

      {/* Orders list */}
      <div className="space-y-4">
        {orders.length === 0 ? (
          <p className="text-gray-600">No orders found</p>
        ) : (
          orders.map((order) => (
            <Link
              key={order.id}
              href={`/orders/${order.id}`}
              className="block border rounded-lg p-6 hover:shadow-lg transition-shadow"
            >
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h3 className="text-lg font-semibold">{order.order_number}</h3>
                  {order.po_number && (
                    <p className="text-sm text-gray-600">PO: {order.po_number}</p>
                  )}
                  <p className="text-sm text-gray-500">
                    {new Date(order.submitted_at!).toLocaleDateString()}
                  </p>
                </div>
                <div className="text-right">
                  <span className={`inline-block px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(order.status)}`}>
                    {order.status}
                  </span>
                  <p className="text-xl font-bold mt-2">${order.total.toFixed(2)}</p>
                </div>
              </div>
              <div className="text-sm text-gray-600">
                {order.order_items.length} items
                {order.order_items.slice(0, 3).map((item, idx) => (
                  <span key={idx}> • {item.products.name}</span>
                ))}
                {order.order_items.length > 3 && ' ...'}
              </div>
            </Link>
          ))
        )}
      </div>
    </div>
  )
}
```

---

## Step 2.3: Order Detail Page with Reorder

**Prompt for Augment**:
```
Create order detail page in /apps/web/src/app/orders/[id]/page.tsx:

import { createClient } from '@/lib/supabase/server'
import { redirect } from 'next/navigation'
import { notFound } from 'next/navigation'
import OrderDetail from '@/components/OrderDetail'

export default async function OrderDetailPage({
  params
}: {
  params: { id: string }
}) {
  const supabase = createClient()
  
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) redirect('/auth/login')

  const { data: order } = await supabase
    .from('orders')
    .select(`
      *,
      order_items (
        *,
        products (*)
      ),
      shipping_addresses (*)
    `)
    .eq('id', params.id)
    .eq('user_id', user.id)
    .single()

  if (!order) notFound()

  return <OrderDetail order={order} userId={user.id} />
}

Create OrderDetail component in /apps/web/src/components/OrderDetail.tsx:

'use client'

import { useState } from 'react'
import { createClient } from '@/lib/supabase/client'
import { useRouter } from 'next/navigation'
import Link from 'next/link'

export default function OrderDetail({ order, userId }: any) {
  const [reordering, setReordering] = useState(false)
  const supabase = createClient()
  const router = useRouter()

  const handleReorder = async () => {
    setReordering(true)

    try {
      // Add all items from this order back to cart
      const cartItems = order.order_items.map((item: any) => ({
        user_id: userId,
        organization_id: order.organization_id,
        product_id: item.product_id,
        quantity: item.quantity
      }))

      // Use upsert to add/update quantities
      for (const item of cartItems) {
        // Check if item already in cart
        const { data: existingItem } = await supabase
          .from('cart_items')
          .select('*')
          .eq('user_id', userId)
          .eq('product_id', item.product_id)
          .single()

        if (existingItem) {
          // Update quantity
          await supabase
            .from('cart_items')
            .update({ quantity: existingItem.quantity + item.quantity })
            .eq('id', existingItem.id)
        } else {
          // Insert new
          await supabase
            .from('cart_items')
            .insert(item)
        }
      }

      router.push('/cart')
    } catch (error) {
      console.error('Error reordering:', error)
      alert('Failed to add items to cart')
      setReordering(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'submitted': return 'bg-blue-100 text-blue-800'
      case 'processing': return 'bg-yellow-100 text-yellow-800'
      case 'shipped': return 'bg-purple-100 text-purple-800'
      case 'delivered': return 'bg-green-100 text-green-800'
      case 'cancelled': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-4">
        <Link href="/orders" className="text-blue-600 hover:underline">
          ← Back to Orders
        </Link>
      </div>

      <div className="grid md:grid-cols-2 gap-8">
        {/* Left column: Order info */}
        <div>
          <div className="flex items-start justify-between mb-6">
            <div>
              <h1 className="text-3xl font-bold">{order.order_number}</h1>
              {order.po_number && (
                <p className="text-gray-600">PO: {order.po_number}</p>
              )}
              <p className="text-gray-500">
                Ordered on {new Date(order.submitted_at).toLocaleDateString()}
              </p>
            </div>
            <span className={`px-4 py-2 rounded-full text-sm font-medium ${getStatusColor(order.status)}`}>
              {order.status}
            </span>
          </div>

          {/* Shipping address */}
          <div className="mb-6">
            <h2 className="text-lg font-semibold mb-2">Shipping Address</h2>
            <div className="bg-gray-50 p-4 rounded">
              <p className="font-medium">{order.shipping_addresses.label}</p>
              <p>{order.shipping_addresses.contact_name}</p>
              <p>{order.shipping_addresses.phone}</p>
              <p>{order.shipping_addresses.street_address}</p>
              {order.shipping_addresses.street_address2 && (
                <p>{order.shipping_addresses.street_address2}</p>
              )}
              <p>
                {order.shipping_addresses.city}, {order.shipping_addresses.state}{' '}
                {order.shipping_addresses.postal_code}
              </p>
            </div>
          </div>

          {/* Tracking info */}
          {order.shipping_tracking_number && (
            <div className="mb-6">
              <h2 className="text-lg font-semibold mb-2">Tracking</h2>
              <p className="text-gray-700">
                {order.shipping_carrier}: {order.shipping_tracking_number}
              </p>
            </div>
          )}

          {/* Notes */}
          {order.notes && (
            <div className="mb-6">
              <h2 className="text-lg font-semibold mb-2">Notes</h2>
              <p className="text-gray-700">{order.notes}</p>
            </div>
          )}

          {/* Reorder button */}
          <button
            onClick={handleReorder}
            disabled={reordering}
            className="w-full bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            {reordering ? 'Adding to Cart...' : 'Reorder All Items'}
          </button>
        </div>

        {/* Right column: Order items & summary */}
        <div>
          <h2 className="text-lg font-semibold mb-4">Order Items</h2>
          <div className="space-y-3 mb-6">
            {order.order_items.map((item: any) => (
              <div key={item.id} className="flex gap-4 border-b pb-3">
                {item.products.image_url && (
                  <img
                    src={item.products.image_url}
                    alt={item.products.name}
                    className="w-16 h-16 object-cover rounded"
                  />
                )}
                <div className="flex-1">
                  <p className="font-medium">{item.name}</p>
                  <p className="text-sm text-gray-600">{item.sku}</p>
                  <p className="text-sm text-gray-500">Qty: {item.quantity}</p>
                </div>
                <div className="text-right">
                  <p className="font-semibold">${item.line_total.toFixed(2)}</p>
                  <p className="text-sm text-gray-500">${item.unit_price.toFixed(2)} each</p>
                </div>
              </div>
            ))}
          </div>

          {/* Order summary */}
          <div className="bg-gray-50 p-4 rounded">
            <div className="space-y-2">
              <div className="flex justify-between">
                <span>Subtotal</span>
                <span>${order.subtotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Tax</span>
                <span>${order.tax.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Shipping</span>
                <span>${order.shipping_cost.toFixed(2)}</span>
              </div>
              <div className="border-t pt-2 flex justify-between font-bold text-lg">
                <span>Total</span>
                <span>${order.total.toFixed(2)}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
```

---

## Step 2.4: Setup Twilio for SMS Notifications

**Prompt for Augment**:
```
1. Sign up for Twilio at https://www.twilio.com/try-twilio
   - Get $15 credit for free trial
   - Verify your phone number
   - Get a Twilio phone number
   - Note your Account SID and Auth Token

2. Install Twilio SDK:
cd ~/Projects/b2b-plus
npm install twilio -W

3. Add environment variables to .env.local:
TWILIO_ACCOUNT_SID=your_account_sid
TWILIO_AUTH_TOKEN=your_auth_token
TWILIO_PHONE_NUMBER=your_twilio_number

4. Create Supabase Edge Function for sending SMS:
supabase functions new send-sms

5. Create /supabase/functions/send-sms/index.ts:

import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const twilioAccountSid = Deno.env.get('TWILIO_ACCOUNT_SID')!
const twilioAuthToken = Deno.env.get('TWILIO_AUTH_TOKEN')!
const twilioPhoneNumber = Deno.env.get('TWILIO_PHONE_NUMBER')!

serve(async (req) => {
  try {
    const { to, message, orderId } = await req.json()

    // Send SMS via Twilio
    const response = await fetch(
      `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`,
      {
        method: 'POST',
        headers: {
          'Authorization': 'Basic ' + btoa(`${twilioAccountSid}:${twilioAuthToken}`),
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          To: to,
          From: twilioPhoneNumber,
          Body: message,
        }),
      }
    )

    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.message || 'Failed to send SMS')
    }

    // Log the SMS (optional: create sms_logs table)
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    return new Response(JSON.stringify({ success: true, sid: data.sid }), {
      headers: { 'Content-Type': 'application/json' },
    })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 400,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})

6. Deploy the function:
supabase functions deploy send-sms --no-verify-jwt

7. Set Twilio secrets:
supabase secrets set TWILIO_ACCOUNT_SID=your_account_sid
supabase secrets set TWILIO_AUTH_TOKEN=your_auth_token
supabase secrets set TWILIO_PHONE_NUMBER=your_twilio_number
```

---

## Step 2.5: Setup Resend for Email Notifications

**Prompt for Augment**:
```
1. Sign up for Resend at https://resend.com
   - Free tier: 3,000 emails/month
   - Get API key from dashboard
   - Verify your domain (or use onboarding@resend.dev for testing)

2. Install Resend SDK:
npm install resend -W

3. Add environment variable to .env.local:
RESEND_API_KEY=your_resend_api_key

4. Create Supabase Edge Function for sending emails:
supabase functions new send-email

5. Create /supabase/functions/send-email/index.ts:

import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'

const resendApiKey = Deno.env.get('RESEND_API_KEY')!

serve(async (req) => {
  try {
    const { to, subject, html, orderId } = await req.json()

    const response = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${resendApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        from: 'B2B+ <orders@yourdomain.com>',
        to: [to],
        subject,
        html,
      }),
    })

    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.message || 'Failed to send email')
    }

    return new Response(JSON.stringify({ success: true, id: data.id }), {
      headers: { 'Content-Type': 'application/json' },
    })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 400,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})

6. Deploy the function:
supabase functions deploy send-email --no-verify-jwt

7. Set Resend secret:
supabase secrets set RESEND_API_KEY=your_resend_api_key
```

---

## Step 2.6: Create Order Notification Triggers

**Location**: `/supabase/migrations/20240102000000_order_notifications.sql`

**Prompt for Augment**:
```
Create migration for order notifications:

-- Notifications queue table
CREATE TABLE notifications_queue (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  type TEXT NOT NULL CHECK (type IN ('email', 'sms', 'push')),
  recipient TEXT NOT NULL, -- email/phone/expo_token
  subject TEXT,
  message TEXT NOT NULL,
  order_id UUID REFERENCES orders(id) ON DELETE CASCADE,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'sent', 'failed')),
  error_message TEXT,
  attempts INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  sent_at TIMESTAMPTZ
);

CREATE INDEX idx_notifications_status ON notifications_queue(status);
CREATE INDEX idx_notifications_order ON notifications_queue(order_id);

-- Function to queue order confirmation notifications
CREATE OR REPLACE FUNCTION queue_order_confirmation_notifications() RETURNS trigger AS $$
DECLARE
  user_email TEXT;
  user_phone TEXT;
  user_push_token TEXT;
  order_details TEXT;
BEGIN
  -- Only send on submitted status
  IF NEW.status = 'submitted' AND (OLD.status IS NULL OR OLD.status != 'submitted') THEN
    -- Get user contact info
    SELECT p.email, p.phone, p.expo_push_token
    INTO user_email, user_phone, user_push_token
    FROM profiles p
    WHERE p.id = NEW.user_id;

    -- Create order details message
    order_details := 'Order ' || NEW.order_number || ' confirmed. Total: $' || NEW.total::TEXT;

    -- Queue email notification
    IF user_email IS NOT NULL THEN
      INSERT INTO notifications_queue (type, recipient, subject, message, order_id)
      VALUES (
        'email',
        user_email,
        'Order Confirmation - ' || NEW.order_number,
        'Thank you for your order! Order ' || NEW.order_number || ' has been confirmed and is being processed. Total: $' || NEW.total::TEXT,
        NEW.id
      );
    END IF;

    -- Queue SMS notification (if phone number exists and user opted in)
    IF user_phone IS NOT NULL THEN
      INSERT INTO notifications_queue (type, recipient, subject, message, order_id)
      VALUES (
        'sms',
        user_phone,
        NULL,
        order_details,
        NEW.id
      );
    END IF;

    -- Queue push notification (if token exists)
    IF user_push_token IS NOT NULL THEN
      INSERT INTO notifications_queue (type, recipient, subject, message, order_id)
      VALUES (
        'push',
        user_push_token,
        'Order Confirmed',
        order_details,
        NEW.id
      );
    END IF;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER queue_order_confirmation_notifications_trigger
  AFTER INSERT OR UPDATE OF status ON orders
  FOR EACH ROW EXECUTE FUNCTION queue_order_confirmation_notifications();

-- Similar triggers for shipped, delivered status changes
CREATE OR REPLACE FUNCTION queue_order_status_notifications() RETURNS trigger AS $$
DECLARE
  user_email TEXT;
  user_phone TEXT;
  order_details TEXT;
  status_message TEXT;
BEGIN
  -- Check if status changed to shipped or delivered
  IF (NEW.status = 'shipped' AND OLD.status != 'shipped') OR
     (NEW.status = 'delivered' AND OLD.status != 'delivered') THEN
    
    -- Get user contact info
    SELECT p.email, p.phone
    INTO user_email, user_phone
    FROM profiles p
    WHERE p.id = NEW.user_id;

    -- Create status message
    IF NEW.status = 'shipped' THEN
      status_message := 'Order ' || NEW.order_number || ' has shipped!';
      IF NEW.shipping_tracking_number IS NOT NULL THEN
        status_message := status_message || ' Tracking: ' || NEW.shipping_tracking_number;
      END IF;
    ELSIF NEW.status = 'delivered' THEN
      status_message := 'Order ' || NEW.order_number || ' has been delivered!';
    END IF;

    -- Queue notifications
    IF user_email IS NOT NULL THEN
      INSERT INTO notifications_queue (type, recipient, subject, message, order_id)
      VALUES ('email', user_email, 'Order Update - ' || NEW.order_number, status_message, NEW.id);
    END IF;

    IF user_phone IS NOT NULL THEN
      INSERT INTO notifications_queue (type, recipient, subject, message, order_id)
      VALUES ('sms', user_phone, NULL, status_message, NEW.id);
    END IF;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER queue_order_status_notifications_trigger
  AFTER UPDATE OF status ON orders
  FOR EACH ROW EXECUTE FUNCTION queue_order_status_notifications();

Run migration:
supabase db reset
```

---

## Step 2.7: Create Notification Processor Edge Function

**Prompt for Augment**:
```
Create processor function that runs on schedule to send queued notifications:

supabase functions new process-notifications

Create /supabase/functions/process-notifications/index.ts:

import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

serve(async (req) => {
  const supabase = createClient(
    Deno.env.get('SUPABASE_URL')!,
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
  )

  // Get pending notifications
  const { data: notifications } = await supabase
    .from('notifications_queue')
    .select('*')
    .eq('status', 'pending')
    .lt('attempts', 3) // Max 3 attempts
    .limit(50) // Process 50 at a time

  if (!notifications || notifications.length === 0) {
    return new Response(JSON.stringify({ processed: 0 }), {
      headers: { 'Content-Type': 'application/json' },
    })
  }

  let successCount = 0
  let failCount = 0

  // Process each notification
  for (const notification of notifications) {
    try {
      if (notification.type === 'email') {
        // Call send-email function
        const response = await fetch(
          `${Deno.env.get('SUPABASE_URL')}/functions/v1/send-email`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${Deno.env.get('SUPABASE_ANON_KEY')}`,
            },
            body: JSON.stringify({
              to: notification.recipient,
              subject: notification.subject,
              html: notification.message,
              orderId: notification.order_id
            }),
          }
        )

        if (!response.ok) throw new Error('Email send failed')

      } else if (notification.type === 'sms') {
        // Call send-sms function
        const response = await fetch(
          `${Deno.env.get('SUPABASE_URL')}/functions/v1/send-sms`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${Deno.env.get('SUPABASE_ANON_KEY')}`,
            },
            body: JSON.stringify({
              to: notification.recipient,
              message: notification.message,
              orderId: notification.order_id
            }),
          }
        )

        if (!response.ok) throw new Error('SMS send failed')

      } else if (notification.type === 'push') {
        // Send push notification via Expo
        const response = await fetch('https://exp.host/--/api/v2/push/send', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            to: notification.recipient,
            title: notification.subject,
            body: notification.message,
            data: { orderId: notification.order_id }
          }),
        })

        if (!response.ok) throw new Error('Push notification failed')
      }

      // Mark as sent
      await supabase
        .from('notifications_queue')
        .update({
          status: 'sent',
          sent_at: new Date().toISOString()
        })
        .eq('id', notification.id)

      successCount++

    } catch (error) {
      // Mark as failed, increment attempts
      await supabase
        .from('notifications_queue')
        .update({
          status: notification.attempts >= 2 ? 'failed' : 'pending',
          error_message: error.message,
          attempts: notification.attempts + 1
        })
        .eq('id', notification.id)

      failCount++
    }
  }

  return new Response(
    JSON.stringify({ processed: notifications.length, success: successCount, failed: failCount }),
    { headers: { 'Content-Type': 'application/json' } }
  )
})

Deploy the function:
supabase functions deploy process-notifications --no-verify-jwt

Set up a cron job to run every minute (in Supabase dashboard):
1. Go to Database > Cron Jobs
2. Create new job named "process_notifications"
3. Schedule: * * * * * (every minute)
4. SQL command:
   SELECT net.http_post(
     url := '<your-supabase-url>/functions/v1/process-notifications',
     headers := '{"Authorization": "Bearer <your-anon-key>"}'::jsonb
   );
```

---

## Step 2.8: Setup Push Notifications in Mobile App

**Prompt for Augment**:
```
1. Install Expo Notifications:
cd apps/mobile
npx expo install expo-notifications expo-device expo-constants

2. Configure app.json for notifications:
{
  "expo": {
    "name": "B2B+",
    "slug": "b2b-plus",
    "plugins": [
      [
        "expo-notifications",
        {
          "icon": "./assets/notification-icon.png",
          "color": "#ffffff",
          "sounds": ["./assets/notification-sound.wav"]
        }
      ]
    ],
    "ios": {
      "bundleIdentifier": "com.b2bplus.app",
      "infoPlist": {
        "UIBackgroundModes": ["remote-notification"]
      }
    },
    "android": {
      "package": "com.b2bplus.app",
      "googleServicesFile": "./google-services.json",
      "permissions": [
        "RECEIVE_BOOT_COMPLETED"
      ]
    }
  }
}

3. Create notification utilities in /apps/mobile/lib/notifications.ts:

import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import Constants from 'expo-constants';
import { Platform } from 'react-native';

// Configure notification handler
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

export async function registerForPushNotifications() {
  if (!Device.isDevice) {
    alert('Must use physical device for Push Notifications');
    return;
  }

  const { status: existingStatus } = await Notifications.getPermissionsAsync();
  let finalStatus = existingStatus;
  
  if (existingStatus !== 'granted') {
    const { status } = await Notifications.requestPermissionsAsync();
    finalStatus = status;
  }
  
  if (finalStatus !== 'granted') {
    alert('Failed to get push token for push notification!');
    return;
  }

  const token = (await Notifications.getExpoPushTokenAsync({
    projectId: Constants.expoConfig?.extra?.eas?.projectId,
  })).data;

  if (Platform.OS === 'android') {
    Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  return token;
}

4. Update AuthContext to register push token on login:
In /apps/mobile/contexts/AuthContext.tsx, add:

import { registerForPushNotifications } from '@/lib/notifications'

// In the useEffect that listens to auth changes:
useEffect(() => {
  supabase.auth.getSession().then(({ data: { session } }) => {
    setSession(session)
    setUser(session?.user ?? null)
    
    // Register for push notifications on login
    if (session?.user) {
      registerForPushNotifications().then(token => {
        if (token) {
          // Save token to profile
          supabase
            .from('profiles')
            .update({ expo_push_token: token })
            .eq('id', session.user.id)
            .then()
        }
      })
    }
    
    setLoading(false)
  })

  const { data: { subscription } } = supabase.auth.onAuthStateChange(
    (_event, session) => {
      setSession(session)
      setUser(session?.user ?? null)
    }
  )

  return () => subscription.unsubscribe()
}, [])

5. Handle notification taps in root layout:
In /apps/mobile/app/_layout.tsx, add:

import * as Notifications from 'expo-notifications';
import { useEffect, useRef } from 'react';
import { router } from 'expo-router';

export default function RootLayout() {
  const notificationListener = useRef<any>();
  const responseListener = useRef<any>();

  useEffect(() => {
    // Listen for notifications received while app is foregrounded
    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      console.log('Notification received:', notification);
    });

    // Listen for user taps on notifications
    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      const orderId = response.notification.request.content.data.orderId;
      if (orderId) {
        router.push(`/(tabs)/orders/${orderId}`);
      }
    });

    return () => {
      Notifications.removeNotificationSubscription(notificationListener.current);
      Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  return (
    <AuthProvider>
      <Slot />
    </AuthProvider>
  );
}
```

---

## Step 2.9: Add Shipping Address Management

**Prompt for Augment**:
```
Create addresses page in /apps/web/src/app/addresses/page.tsx:

import { createClient } from '@/lib/supabase/server'
import { redirect } from 'next/navigation'
import AddressList from '@/components/AddressList'

export default async function AddressesPage() {
  const supabase = createClient()
  
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) redirect('/auth/login')

  const { data: profile } = await supabase
    .from('profiles')
    .select('current_organization_id')
    .eq('id', user.id)
    .single()

  const { data: addresses } = await supabase
    .from('shipping_addresses')
    .select('*')
    .eq('organization_id', profile?.current_organization_id)
    .order('is_default', { ascending: false })

  return <AddressList addresses={addresses || []} organizationId={profile?.current_organization_id!} />
}

Create AddressList component in /apps/web/src/components/AddressList.tsx:

'use client'

import { useState } from 'react'
import { createClient } from '@/lib/supabase/client'

type Address = {
  id: string
  label: string
  contact_name: string
  phone: string
  street_address: string
  street_address2: string | null
  city: string
  state: string
  postal_code: string
  is_default: boolean
}

export default function AddressList({
  addresses: initialAddresses,
  organizationId
}: {
  addresses: Address[]
  organizationId: string
}) {
  const [addresses, setAddresses] = useState(initialAddresses)
  const [showForm, setShowForm] = useState(false)
  const [formData, setFormData] = useState({
    label: '',
    contact_name: '',
    phone: '',
    street_address: '',
    street_address2: '',
    city: '',
    state: '',
    postal_code: '',
    is_default: false
  })
  const supabase = createClient()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    const { error } = await supabase
      .from('shipping_addresses')
      .insert({
        ...formData,
        organization_id: organizationId
      })

    if (!error) {
      window.location.reload()
    }
  }

  const setDefault = async (addressId: string) => {
    // First, unset all defaults
    await supabase
      .from('shipping_addresses')
      .update({ is_default: false })
      .eq('organization_id', organizationId)

    // Then set the selected one as default
    await supabase
      .from('shipping_addresses')
      .update({ is_default: true })
      .eq('id', addressId)

    window.location.reload()
  }

  const deleteAddress = async (addressId: string) => {
    if (!confirm('Are you sure you want to delete this address?')) return

    await supabase
      .from('shipping_addresses')
      .delete()
      .eq('id', addressId)

    window.location.reload()
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">Shipping Addresses</h1>
        <button
          onClick={() => setShowForm(!showForm)}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          {showForm ? 'Cancel' : '+ Add Address'}
        </button>
      </div>

      {/* Add address form */}
      {showForm && (
        <form onSubmit={handleSubmit} className="mb-8 border rounded-lg p-6 bg-gray-50">
          <h2 className="text-xl font-semibold mb-4">New Address</h2>
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Label *</label>
              <input
                type="text"
                required
                value={formData.label}
                onChange={(e) => setFormData({ ...formData, label: e.target.value })}
                placeholder="e.g. Main Kitchen"
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Contact Name *</label>
              <input
                type="text"
                required
                value={formData.contact_name}
                onChange={(e) => setFormData({ ...formData, contact_name: e.target.value })}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Phone *</label>
              <input
                type="tel"
                required
                value={formData.phone}
                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Street Address *</label>
              <input
                type="text"
                required
                value={formData.street_address}
                onChange={(e) => setFormData({ ...formData, street_address: e.target.value })}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Street Address 2</label>
              <input
                type="text"
                value={formData.street_address2}
                onChange={(e) => setFormData({ ...formData, street_address2: e.target.value })}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">City *</label>
              <input
                type="text"
                required
                value={formData.city}
                onChange={(e) => setFormData({ ...formData, city: e.target.value })}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">State *</label>
              <input
                type="text"
                required
                value={formData.state}
                onChange={(e) => setFormData({ ...formData, state: e.target.value })}
                maxLength={2}
                placeholder="CA"
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Postal Code *</label>
              <input
                type="text"
                required
                value={formData.postal_code}
                onChange={(e) => setFormData({ ...formData, postal_code: e.target.value })}
                className="w-full border rounded px-3 py-2"
              />
            </div>
          </div>
          <button
            type="submit"
            className="mt-4 bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
          >
            Save Address
          </button>
        </form>
      )}

      {/* Address list */}
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
        {addresses.map((address) => (
          <div
            key={address.id}
            className={`border rounded-lg p-4 ${address.is_default ? 'border-blue-600 border-2' : ''}`}
          >
            <div className="flex justify-between items-start mb-2">
              <h3 className="font-semibold text-lg">{address.label}</h3>
              {address.is_default && (
                <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                  Default
                </span>
              )}
            </div>
            <p>{address.contact_name}</p>
            <p>{address.phone}</p>
            <p>{address.street_address}</p>
            {address.street_address2 && <p>{address.street_address2}</p>}
            <p>
              {address.city}, {address.state} {address.postal_code}
            </p>
            <div className="mt-4 flex gap-2">
              {!address.is_default && (
                <button
                  onClick={() => setDefault(address.id)}
                  className="text-blue-600 text-sm hover:underline"
                >
                  Set as Default
                </button>
              )}
              <button
                onClick={() => deleteAddress(address.id)}
                className="text-red-600 text-sm hover:underline ml-auto"
              >
                Delete
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}
```

---

## Phase 2 Complete ✅

You now have:
- ✅ Complete checkout flow
- ✅ Order history with filtering
- ✅ Quick reorder functionality
- ✅ Multiple shipping addresses
- ✅ PO number tracking
- ✅ SMS notifications via Twilio
- ✅ Email notifications via Resend
- ✅ Push notifications via Expo
- ✅ Automated notification queue system

**Costs at Phase 2**:
- Supabase Pro: $25/month
- Twilio: ~$8/month (1,000 SMS)
- Resend: $0/month (under 3,000 emails)
- Expo Notifications: $0/month
- **Total: ~$33/month**

**Next**: Proceed to Phase 3 for bulk ordering, role-based pricing, and offline capability.

See "B2B+ Phase 3 Implementation Guide" artifact.
